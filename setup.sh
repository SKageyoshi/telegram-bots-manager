#!/bin/bash

# ü§ñ Script de Setup - Sistema de Bots do Telegram
# Configura√ß√£o autom√°tica do ambiente

set -e

echo "üöÄ Iniciando setup do Sistema de Bots do Telegram..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para print colorido
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se Docker est√° rodando
print_status "Verificando Docker..."
if ! docker info > /dev/null 2>&1; then
    print_error "Docker n√£o est√° rodando ou n√£o est√° instalado!"
    exit 1
fi
print_success "Docker est√° rodando"

# Verificar se est√° em modo Swarm
print_status "Verificando Docker Swarm..."
if ! docker node ls > /dev/null 2>&1; then
    print_warning "Docker Swarm n√£o est√° inicializado. Inicializando..."
    docker swarm init
fi
print_success "Docker Swarm est√° ativo"

# Verificar rede existente
print_status "Verificando rede 'minha_rede'..."
if ! docker network ls | grep -q "minha_rede"; then
    print_warning "Rede 'minha_rede' n√£o encontrada. Criando..."
    docker network create --driver overlay minha_rede
fi
print_success "Rede 'minha_rede' est√° dispon√≠vel"

# Criar diret√≥rios necess√°rios
print_status "Criando diret√≥rios..."
mkdir -p bot-sessions bot-logs bot-scripts bot-configs
print_success "Diret√≥rios criados"

# Verificar arquivo .env
print_status "Verificando configura√ß√µes..."
if [ ! -f .env ]; then
    print_warning "Arquivo .env n√£o encontrado. Copiando do exemplo..."
    cp env.example .env
    print_warning "IMPORTANTE: Edite o arquivo .env com suas credenciais do Telegram!"
    print_warning "Execute: nano .env"
    read -p "Pressione Enter ap√≥s editar o .env..."
fi

# Verificar se .env tem as configura√ß√µes necess√°rias
if ! grep -q "TELEGRAM_API_ID=" .env || ! grep -q "TELEGRAM_API_HASH=" .env; then
    print_error "Arquivo .env n√£o est√° configurado corretamente!"
    print_error "Configure TELEGRAM_API_ID e TELEGRAM_API_HASH no arquivo .env"
    exit 1
fi
print_success "Configura√ß√µes verificadas"

# Verificar se os servi√ßos existentes est√£o rodando
print_status "Verificando servi√ßos existentes..."

# Verificar Redis
if ! docker service ls | grep -q "redis"; then
    print_warning "Servi√ßo Redis n√£o encontrado. Certifique-se de que est√° rodando."
fi

# Verificar PostgreSQL
if ! docker service ls | grep -q "postgres"; then
    print_warning "Servi√ßo PostgreSQL n√£o encontrado. Certifique-se de que est√° rodando."
fi

# Verificar MinIO
if ! docker service ls | grep -q "minio"; then
    print_warning "Servi√ßo MinIO n√£o encontrado. Certifique-se de que est√° rodando."
fi

print_success "Verifica√ß√£o de servi√ßos conclu√≠da"

# Build da imagem do bot-manager
print_status "Fazendo build da imagem do bot-manager..."
docker build -t telegram-bots-manager ./bot-manager
print_success "Build conclu√≠do"

# Deploy da stack
print_status "Fazendo deploy da stack..."
docker stack deploy -c docker-compose.yml telegram-bots
print_success "Stack deployada"

# Aguardar servi√ßos iniciarem
print_status "Aguardando servi√ßos iniciarem..."
sleep 10

# Verificar status dos servi√ßos
print_status "Verificando status dos servi√ßos..."
docker stack services telegram-bots

# Aguardar mais um pouco para garantir que tudo est√° rodando
print_status "Aguardando inicializa√ß√£o completa..."
sleep 30

# Verificar se a interface est√° acess√≠vel
print_status "Testando interface web..."
if curl -s -o /dev/null -w "%{http_code}" http://localhost:8000 | grep -q "200"; then
    print_success "Interface web est√° acess√≠vel"
else
    print_warning "Interface web pode n√£o estar acess√≠vel ainda. Aguarde alguns minutos."
fi

# Mostrar informa√ß√µes finais
echo ""
echo "üéâ Setup conclu√≠do com sucesso!"
echo ""
echo "üìã Informa√ß√µes importantes:"
echo "  ‚Ä¢ Interface web: https://iabots.blackops7.cloud"
echo "  ‚Ä¢ Logs do manager: docker service logs -f telegram-bots_bot-manager"
echo "  ‚Ä¢ Logs do monitor: docker service logs -f telegram-bots_bot-monitor"
echo "  ‚Ä¢ Status da stack: docker stack services telegram-bots"
echo ""
echo "üîß Comandos √∫teis:"
echo "  ‚Ä¢ Parar stack: docker stack rm telegram-bots"
echo "  ‚Ä¢ Atualizar: docker service update --force telegram-bots_bot-manager"
echo "  ‚Ä¢ Ver logs: docker service logs -f telegram-bots_bot-manager"
echo ""
echo "üìö Documenta√ß√£o completa: README.md"
echo ""
print_success "Sistema pronto para uso! üöÄ"
